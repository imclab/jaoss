#!/usr/bin/php
<?php
define("JAOSS_CLI", true);

if (file_exists("build.xml")) {
    define("PROJECT_ROOT", getcwd().'/');
} else {
    define("PROJECT_ROOT", null);
}

if (!defined("JAOSS_ROOT")) {
    define("JAOSS_ROOT", realpath(dirname( __FILE__).'/../').'/');
}

set_include_path(get_include_path() . PATH_SEPARATOR . JAOSS_ROOT);
if (php_sapi_name() !== 'cli') {
    echo "Please use the jaoss tool in CLI mode only\n";
    exit(1);
}

error_reporting(-1);

// convert errors into exceptions
set_error_handler(function($errno, $errstr, $errfile, $errline) {
    if (error_reporting() == 0) {
        //Log::info("Surpressed error (".$errno.") caught in handler: [".$errstr."] in [".$errfile."] line [".$errline."]");
        return;
    }
    throw new ErrorException($errstr, 0, $errno, $errfile, $errline);
});

include("library/cli/cli.php");
include("library/cli/colours.php");
include("library/cli/exception.php");

include("library/Smarty/libs/Smarty.class.php");
include("library/core_exception.php");
include("library/email.php");
include("library/file.php");
include("library/validate.php");
include("library/error_handler.php");
include("library/flash_messenger.php");
include("library/log.php");
include("library/path.php");
include("library/path_manager.php");
include("library/request.php");
include("library/response.php");
include("library/controller.php");
include("library/settings.php");
include("library/database.php");
include("library/table.php");
include("library/object.php");
include("library/app.php");
include("library/app_manager.php");
include("library/cookie_jar.php");
include("library/session.php");
include("library/utils.php");
include("library/image.php");
include("library/cache.php");

require_once("library/test/test_request.php");

if (($key = array_search("--no-colour", $argv)) !== false) {
    unset($argv[$key]);
    $argv = array_values($argv);
    Colours::disable();
}

$mode = getenv("PROJECT_MODE") !== false ? getenv("PROJECT_MODE") : "test";
echo "PROJECT_MODE set to ".Colours::cyan($mode)."\n\n";

try {
    $init = microtime(true);
    Settings::setMode($mode);
    include("library/boot.php");
    include("library/load_apps.php");
    $class = Cli::factory($argc, $argv, $mode);
    $class->run();
    $class->clearOutputColour();
    $execTime = microtime(true) - $init;
    echo Colours::green("Done (".round($execTime, 3)." secs)")."\n";
} catch (CliException $e) {
    echo $e->getMessage()."\n";
    exit($e->getCode());
} catch (Exception $e) {
    echo Colours::red("[".get_class($e)."] ".$e->getMessage())."\n";
    exit(255);
}
exit(0);
